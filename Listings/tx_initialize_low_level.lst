


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ********************/
    2 00000000         ;/*                                                     
                                          */
    3 00000000         ;/*       Copyright (c) Microsoft Corporation. All right
                       s reserved.        */
    4 00000000         ;/*                                                     
                                          */
    5 00000000         ;/*       This software is licensed under the Microsoft 
                       Software License   */
    6 00000000         ;/*       Terms for Microsoft Azure RTOS. Full text of t
                       he license can be  */
    7 00000000         ;/*       found in the LICENSE file at https://aka.ms/Az
                       ureRTOS_EULA       */
    8 00000000         ;/*       and in the root directory of this software.   
                                          */
    9 00000000         ;/*                                                     
                                          */
   10 00000000         ;/******************************************************
                       ********************/
   11 00000000         ;
   12 00000000         ;
   13 00000000         ;/******************************************************
                       ********************/
   14 00000000         ;/******************************************************
                       ********************/
   15 00000000         ;/**                                                    
                                          */
   16 00000000         ;/** ThreadX Component                                  
                                          */
   17 00000000         ;/**                                                    
                                          */
   18 00000000         ;/**   Initialize                                       
                                          */
   19 00000000         ;/**                                                    
                                          */
   20 00000000         ;/******************************************************
                       ********************/
   21 00000000         ;/******************************************************
                       ********************/
   22 00000000         ;
   23 00000000         ;
   24 00000000                 IMPORT           _tx_thread_system_stack_ptr
   25 00000000                 IMPORT           _tx_initialize_unused_memory
   26 00000000                 IMPORT           _tx_timer_interrupt
   27 00000000                 IMPORT           __main
   28 00000000                 IMPORT           |Image$$RO$$Limit|
   29 00000000                 IMPORT           |Image$$RW$$Base|
   30 00000000                 IMPORT           |Image$$ZI$$Base|
   31 00000000                 IMPORT           |Image$$ZI$$Limit|
   32 00000000                 IMPORT           __tx_PendSVHandler
   33 00000000         ;
   34 00000000         ;
   35 00000000 005B8D80 
                       SYSTEM_CLOCK
                               EQU              6000000
   36 00000000 0000EA5F 
                       SYSTICK_CYCLES
                               EQU              ((SYSTEM_CLOCK / 100) -1)



ARM Macro Assembler    Page 2 


   37 00000000         ;
   38 00000000         ;
   39 00000000         ;/* Setup the stack and heap areas.  */
   40 00000000         ;
   41 00000000 00000400 
                       STACK_SIZE
                               EQU              0x00000400
   42 00000000 00000000 
                       HEAP_SIZE
                               EQU              0x00000000
   43 00000000         
   44 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   45 00000000         StackMem
   46 00000000                 SPACE            STACK_SIZE
   47 00000400         __initial_sp
   48 00000400         
   49 00000400         
   50 00000400                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3
   51 00000000         __heap_base
   52 00000000         HeapMem
   53 00000000                 SPACE            HEAP_SIZE
   54 00000000         __heap_limit
   55 00000000         
   56 00000000         
   57 00000000                 AREA             RESET, CODE, READONLY
   58 00000000         ;
   59 00000000                 EXPORT           __tx_vectors
   60 00000000         __tx_vectors
   61 00000000 00000000        DCD              __initial_sp ; Reset and system
                                                             stack ptr
   62 00000004 00000000        DCD              Reset_Handler ; Reset goes to s
                                                            tartup function
   63 00000008 00000000        DCD              __tx_NMIHandler ; NMI
   64 0000000C 00000000        DCD              __tx_BadHandler ; HardFault
   65 00000010 00000000        DCD              0           ; MemManage
   66 00000014 00000000        DCD              0           ; BusFault
   67 00000018 00000000        DCD              0           ; UsageFault
   68 0000001C 00000000        DCD              0           ; 7
   69 00000020 00000000        DCD              0           ; 8
   70 00000024 00000000        DCD              0           ; 9
   71 00000028 00000000        DCD              0           ; 10
   72 0000002C 00000000        DCD              __tx_SVCallHandler ; SVCall
   73 00000030 00000000        DCD              __tx_DBGHandler ; Monitor
   74 00000034 00000000        DCD              0           ; 13
   75 00000038 00000000        DCD              __tx_PendSVHandler ; PendSV
   76 0000003C 00000000        DCD              __tx_SysTickHandler ; SysTick
   77 00000040 00000000        DCD              __tx_IntHandler ; Int 0
   78 00000044 00000000        DCD              __tx_IntHandler ; Int 1
   79 00000048 00000000        DCD              __tx_IntHandler ; Int 2
   80 0000004C 00000000        DCD              __tx_IntHandler ; Int 3
   81 00000050         ;
   82 00000050         ;
   83 00000050                 AREA             ||.text||, CODE, READONLY
   84 00000000                 EXPORT           Reset_Handler
   85 00000000         Reset_Handler
   86 00000000 B672            CPSID            i
   87 00000002 481C            LDR              R0, =__main



ARM Macro Assembler    Page 3 


   88 00000004 4700            BX               R0
   89 00000006         
   90 00000006         
   91 00000006         ;/******************************************************
                       ********************/
   92 00000006         ;/*                                                     
                                          */
   93 00000006         ;/*  FUNCTION                                           
                           RELEASE        */
   94 00000006         ;/*                                                     
                                          */
   95 00000006         ;/*    _tx_initialize_low_level                         
                        Cortex-M3/AC5     */
   96 00000006         ;/*                                                     
                             6.1          */
   97 00000006         ;/*  AUTHOR                                             
                                          */
   98 00000006         ;/*                                                     
                                          */
   99 00000006         ;/*    William E. Lamie, Microsoft Corporation          
                                          */
  100 00000006         ;/*                                                     
                                          */
  101 00000006         ;/*  DESCRIPTION                                        
                                          */
  102 00000006         ;/*                                                     
                                          */
  103 00000006         ;/*    This function is responsible for any low-level pr
                       ocessor            */
  104 00000006         ;/*    initialization, including setting up interrupt ve
                       ctors, setting     */
  105 00000006         ;/*    up a periodic timer interrupt source, saving the 
                       system stack       */
  106 00000006         ;/*    pointer for use in ISR processing later, and find
                       ing the first      */
  107 00000006         ;/*    available RAM memory address for tx_application_d
                       efine.             */
  108 00000006         ;/*                                                     
                                          */
  109 00000006         ;/*  INPUT                                              
                                          */
  110 00000006         ;/*                                                     
                                          */
  111 00000006         ;/*    None                                             
                                          */
  112 00000006         ;/*                                                     
                                          */
  113 00000006         ;/*  OUTPUT                                             
                                          */
  114 00000006         ;/*                                                     
                                          */
  115 00000006         ;/*    None                                             
                                          */
  116 00000006         ;/*                                                     
                                          */
  117 00000006         ;/*  CALLS                                              
                                          */
  118 00000006         ;/*                                                     
                                          */



ARM Macro Assembler    Page 4 


  119 00000006         ;/*    None                                             
                                          */
  120 00000006         ;/*                                                     
                                          */
  121 00000006         ;/*  CALLED BY                                          
                                          */
  122 00000006         ;/*                                                     
                                          */
  123 00000006         ;/*    _tx_initialize_kernel_enter           ThreadX ent
                       ry function        */
  124 00000006         ;/*                                                     
                                          */
  125 00000006         ;/*  RELEASE HISTORY                                    
                                          */
  126 00000006         ;/*                                                     
                                          */
  127 00000006         ;/*    DATE              NAME                      DESCR
                       IPTION             */
  128 00000006         ;/*                                                     
                                          */
  129 00000006         ;/*  09-30-2020     William E. Lamie         Initial Ver
                       sion 6.1           */
  130 00000006         ;/*                                                     
                                          */
  131 00000006         ;/******************************************************
                       ********************/
  132 00000006         ;VOID   _tx_initialize_low_level(VOID)
  133 00000006         ;{
  134 00000006                 EXPORT           _tx_initialize_low_level
  135 00000006         _tx_initialize_low_level
  136 00000006         ;
  137 00000006         ;    /* Disable interrupts during ThreadX initialization
                       .  */
  138 00000006         ;
  139 00000006 B672            CPSID            i
  140 00000008         ;
  141 00000008         ;    /* Set base of available memory to end of non-initi
                       alised RAM area.  */
  142 00000008         ;
  143 00000008 481B            LDR              r0, =_tx_initialize_unused_memo
ry 
                                                            ; Build address of 
                                                            unused memory point
                                                            er
  144 0000000A 491C            LDR              r1, =|Image$$ZI$$Limit| ; Build
                                                             first free address
                                                            
  145 0000000C F101 0104       ADD              r1, r1, #4  ;
  146 00000010 6001            STR              r1, [r0]    ; Setup first unuse
                                                            d memory pointer
  147 00000012         ;
  148 00000012         ;    /* Setup Vector Table Offset Register.  */
  149 00000012         ;
  150 00000012 F04F 20E0       MOV              r0, #0xE000E000 ; Build address
                                                             of NVIC registers
  151 00000016 491A            LDR              r1, =__tx_vectors ; Pickup addr
                                                            ess of vector table
                                                            
  152 00000018 F8C0 1D08       STR              r1, [r0, #0xD08] ; Set vector t



ARM Macro Assembler    Page 5 


                                                            able address
  153 0000001C         ;
  154 0000001C         ;    /* Enable the cycle count register.  */
  155 0000001C         ;
  156 0000001C         ;    LDR     r0, =0xE0001000                     ; Build
                        address of DWT register
  157 0000001C         ;    LDR     r1, [r0]                            ; Picku
                       p the current value
  158 0000001C         ;    ORR     r1, r1, #1                          ; Set t
                       he CYCCNTENA bit
  159 0000001C         ;    STR     r1, [r0]                            ; Enabl
                       e the cycle count register
  160 0000001C         ;
  161 0000001C         ;    /* Set system stack pointer from vector value.  */
  162 0000001C         ;
  163 0000001C 4819            LDR              r0, =_tx_thread_system_stack_pt
r 
                                                            ; Build address of 
                                                            system stack pointe
                                                            r
  164 0000001E 4918            LDR              r1, =__tx_vectors ; Pickup addr
                                                            ess of vector table
                                                            
  165 00000020 6809            LDR              r1, [r1]    ; Pickup reset stac
                                                            k pointer
  166 00000022 6001            STR              r1, [r0]    ; Save system stack
                                                             pointer
  167 00000024         ;
  168 00000024         ;    /* Configure SysTick for 100Hz clock, or 16384 cycl
                       es if no reference.  */
  169 00000024         ;
  170 00000024 F04F 20E0       MOV              r0, #0xE000E000 ; Build address
                                                             of NVIC registers
  171 00000028 F64E 215F       LDR              r1, =SYSTICK_CYCLES
  172 0000002C 6141            STR              r1, [r0, #0x14] ; Setup SysTick
                                                             Reload Value
  173 0000002E F04F 0107       MOV              r1, #0x7    ; Build SysTick Con
                                                            trol Enable Value
  174 00000032 6101            STR              r1, [r0, #0x10] ; Setup SysTick
                                                             Control
  175 00000034         ;
  176 00000034         ;    /* Configure handler priorities.  */
  177 00000034         ;
  178 00000034 F04F 0100       LDR              r1, =0x00000000 ; Rsrv, UsgF, B
                                                            usF, MemM
  179 00000038 F8C0 1D18       STR              r1, [r0, #0xD18] ; Setup System
                                                             Handlers 4-7 Prior
                                                            ity Registers
  180 0000003C         
  181 0000003C F04F 417F       LDR              r1, =0xFF000000 ; SVCl, Rsrv, R
                                                            srv, Rsrv
  182 00000040 F8C0 1D1C       STR              r1, [r0, #0xD1C] ; Setup System
                                                             Handlers 8-11 Prio
                                                            rity Registers
  183 00000044         ; Note: SVC must be lowest priority, which is 0xFF
  184 00000044         
  185 00000044 4910            LDR              r1, =0x40FF0000 ; SysT, PnSV, R
                                                            srv, DbgM
  186 00000046 F8C0 1D20       STR              r1, [r0, #0xD20] ; Setup System



ARM Macro Assembler    Page 6 


                                                             Handlers 12-15 Pri
                                                            ority Registers
  187 0000004A         ; Note: PnSV must be lowest priority, which is 0xFF
  188 0000004A         ;
  189 0000004A         ;    /* Return to caller.  */
  190 0000004A         ;
  191 0000004A 4770            BX               lr
  192 0000004C         ;}
  193 0000004C         ;
  194 0000004C         ;
  195 0000004C         ;/* Define initial heap/stack routine for the ARM RVCT s
                       tartup code.
  196 0000004C         ;   This routine will set the initial stack and heap loc
                       ations */
  197 0000004C         ;
  198 0000004C                 EXPORT           __user_initial_stackheap1
  199 0000004C         __user_initial_stackheap1
  200 0000004C 480F            LDR              R0, =HeapMem
  201 0000004E 4910            LDR              R1, =(StackMem + STACK_SIZE)
  202 00000050 4A0E            LDR              R2, =(HeapMem + HEAP_SIZE)
  203 00000052 4B10            LDR              R3, =StackMem
  204 00000054 4770            BX               LR
  205 00000056         ;
  206 00000056         ;
  207 00000056         ;/* Define shells for each of the unused vectors.  */
  208 00000056         ;
  209 00000056                 EXPORT           __tx_BadHandler
  210 00000056         __tx_BadHandler
  211 00000056 E7FE            B                __tx_BadHandler
  212 00000058         
  213 00000058         
  214 00000058                 EXPORT           __tx_SVCallHandler
  215 00000058         __tx_SVCallHandler
  216 00000058 E7FE            B                __tx_SVCallHandler
  217 0000005A         
  218 0000005A         
  219 0000005A                 EXPORT           __tx_IntHandler
  220 0000005A         __tx_IntHandler
  221 0000005A         ; VOID InterruptHandler (VOID)
  222 0000005A         ; {
  223 0000005A B501            PUSH             {r0, lr}
  224 0000005C         
  225 0000005C         ;    /* Do interrupt handler work here */
  226 0000005C         ;    /* .... */
  227 0000005C         
  228 0000005C E8BD 4001       POP              {r0, lr}
  229 00000060 4770            BX               LR
  230 00000062         ; }
  231 00000062         
  232 00000062                 EXPORT           __tx_SysTickHandler
  233 00000062         __tx_SysTickHandler
  234 00000062         ; VOID TimerInterruptHandler (VOID)
  235 00000062         ; {
  236 00000062         ;
  237 00000062 B501            PUSH             {r0, lr}
  238 00000064 F7FF FFFE       BL               _tx_timer_interrupt
  239 00000068 E8BD 4001       POP              {r0, lr}
  240 0000006C 4770            BX               LR
  241 0000006E         ; }



ARM Macro Assembler    Page 7 


  242 0000006E         
  243 0000006E                 EXPORT           __tx_NMIHandler
  244 0000006E         __tx_NMIHandler
  245 0000006E E7FE            B                __tx_NMIHandler
  246 00000070         
  247 00000070                 EXPORT           __tx_DBGHandler
  248 00000070         __tx_DBGHandler
  249 00000070 E7FE            B                __tx_DBGHandler
  250 00000072         
  251 00000072 00 00           ALIGN
  252 00000074 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              40FF0000 
              00000000 
              00000400 
              00000000         LTORG
  253 00000098                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\tx_initialize_low_level.d -o.\objects\tx_initialize_low_
level.o -I.\RTE\Device\STM32F103C8 -I.\RTE\_Target_1 -IC:\Users\Admin\AppData\L
ocal\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Loca
l\Arm\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include -IC:\Users\Admin\AppData\Lo
cal\Arm\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\StdPeriph_Driver\inc --predefine=
"__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 531" --predefine="_RTE_ SET
A 1" --predefine="STM32F10X_MD SETA 1" --predefine="_RTE_ SETA 1" --list=.\list
ings\tx_initialize_low_level.lst C:\Users\Admin\Downloads\threadx-master\thread
x-master\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 44 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      None
Comment: STACK unused
StackMem 00000000

Symbol: StackMem
   Definitions
      At line 45 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 201 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 203 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

__initial_sp 00000400

Symbol: __initial_sp
   Definitions
      At line 47 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 61 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
Comment: __initial_sp used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 50 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      None
Comment: HEAP unused
HeapMem 00000000

Symbol: HeapMem
   Definitions
      At line 52 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 200 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 202 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

__heap_base 00000000

Symbol: __heap_base
   Definitions
      At line 51 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      None
Comment: __heap_base unused
__heap_limit 00000000

Symbol: __heap_limit
   Definitions
      At line 54 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      None
Comment: __heap_limit unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 57 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      None
Comment: RESET unused
__tx_vectors 00000000

Symbol: __tx_vectors
   Definitions
      At line 60 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 59 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 151 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 164 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 85 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 62 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 84 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

__tx_BadHandler 00000056

Symbol: __tx_BadHandler
   Definitions
      At line 210 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 64 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 209 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 211 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

__tx_DBGHandler 00000070

Symbol: __tx_DBGHandler
   Definitions
      At line 248 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 73 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 247 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 249 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

__tx_IntHandler 0000005A

Symbol: __tx_IntHandler
   Definitions
      At line 220 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 77 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 78 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 79 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 80 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 219 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

__tx_NMIHandler 0000006E



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: __tx_NMIHandler
   Definitions
      At line 244 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 63 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 243 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 245 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

__tx_SVCallHandler 00000058

Symbol: __tx_SVCallHandler
   Definitions
      At line 215 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 72 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 214 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 216 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

__tx_SysTickHandler 00000062

Symbol: __tx_SysTickHandler
   Definitions
      At line 233 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 76 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 232 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

__user_initial_stackheap1 0000004C

Symbol: __user_initial_stackheap1
   Definitions
      At line 199 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 198 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
Comment: __user_initial_stackheap1 used once
_tx_initialize_low_level 00000006

Symbol: _tx_initialize_low_level
   Definitions
      At line 135 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 134 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
Comment: _tx_initialize_low_level used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

|.text| 00000000

Symbol: |.text|
   Definitions
      At line 83 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      None
Comment: |.text| unused
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

HEAP_SIZE 00000000

Symbol: HEAP_SIZE
   Definitions
      At line 42 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 53 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 202 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

STACK_SIZE 00000400

Symbol: STACK_SIZE
   Definitions
      At line 41 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 46 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
      At line 201 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s

SYSTEM_CLOCK 005B8D80

Symbol: SYSTEM_CLOCK
   Definitions
      At line 35 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 36 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
Comment: SYSTEM_CLOCK used once
SYSTICK_CYCLES 0000EA5F

Symbol: SYSTICK_CYCLES
   Definitions
      At line 36 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 171 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
Comment: SYSTICK_CYCLES used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Image$$RO$$Limit 00000000

Symbol: Image$$RO$$Limit
   Definitions
      At line 28 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      None
Comment: Image$$RO$$Limit unused
Image$$RW$$Base 00000000

Symbol: Image$$RW$$Base
   Definitions
      At line 29 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      None
Comment: Image$$RW$$Base unused
Image$$ZI$$Base 00000000

Symbol: Image$$ZI$$Base
   Definitions
      At line 30 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      None
Comment: Image$$ZI$$Base unused
Image$$ZI$$Limit 00000000

Symbol: Image$$ZI$$Limit
   Definitions
      At line 31 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 144 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
Comment: Image$$ZI$$Limit used once
__main 00000000

Symbol: __main
   Definitions
      At line 27 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 87 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
Comment: __main used once
__tx_PendSVHandler 00000000

Symbol: __tx_PendSVHandler
   Definitions
      At line 32 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 75 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
Comment: __tx_PendSVHandler used once
_tx_initialize_unused_memory 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: _tx_initialize_unused_memory
   Definitions
      At line 25 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 143 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
Comment: _tx_initialize_unused_memory used once
_tx_thread_system_stack_ptr 00000000

Symbol: _tx_thread_system_stack_ptr
   Definitions
      At line 24 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 163 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
Comment: _tx_thread_system_stack_ptr used once
_tx_timer_interrupt 00000000

Symbol: _tx_timer_interrupt
   Definitions
      At line 26 in file C:\Users\Admin\Downloads\threadx-master\threadx-master
\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
   Uses
      At line 238 in file C:\Users\Admin\Downloads\threadx-master\threadx-maste
r\ports\cortex_m3\keil\example_build\tx_initialize_low_level.s
Comment: _tx_timer_interrupt used once
9 symbols
368 symbols in table
